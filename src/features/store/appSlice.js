import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import API  from './appAPI';

const initialState = {
  view: 0,
  // status fetch REST API dati da dataabase
  dataStatus:'idle',
  // dati
  data: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getDataAsync = createAsyncThunk(
  'app/fetchCount',
  async () => {
    const data1 = await ( await fetch( API.getAllRegister() )).json()
    const data2 = await ( await fetch( API.getAllStringing() )).json()

    const register = data1.rows
    const stringing = data2.rows

    await new Promise(resolve => setTimeout(resolve, 3000));

    // The value we return becomes the `fulfilled` action payload
    return { register , stringing }
  }
);

export const appSlice = createSlice({
  name: 'app',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getDataAsync.pending, (state) => {
        state.dataStatus = 'loading';
      })
      .addCase(getDataAsync.fulfilled, (state, action) => {
        state.dataStatus = 'idle';
        state.data = action.payload;
      });
  },
});

//export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectData = (state) => state.app.data
export const selectDataStatus = (state) => state.app.dataStatus
export const selectView = (state) => state.app.view


export default appSlice.reducer;
