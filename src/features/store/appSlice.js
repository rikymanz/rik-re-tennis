import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import API  from './appAPI';
import loginHelper from './../login/loginHelper'

const initialState = {
  view: 0,
  // status fetch REST API dati da dataabase
  dataStatus:'idle',
  // dati
  data: null,
  isValidSession:false,
  token: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getDataAsync = createAsyncThunk(
  'app/getDataAsync',
  async ( arg , { getState }) => {

      const state = getState()

      await new Promise(resolve => setTimeout(resolve, 3000));

      const data1 = await ( await fetch( API.getAllRegister(),{ method:'GET', headers:{ token:state.app.token }})).json()
      const data2 = await ( await fetch( API.getAllStringing(),{ method:'GET', headers:{ token:state.app.token }})).json()

      const register = data1.rows
      const stringing = data2.rows

      // The value we return becomes the `fulfilled` action payload
      return { register , stringing }
  }
);

export const login = createAsyncThunk(
  'app/login',
  async ( data ) => {
      const response = await fetch( API.login(), {
        method: 'POST', // *GET, POST, PUT, DELETE, etc.
        mode: 'cors', // no-cors, *cors, same-origin
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data) // body data type must match "Content-Type" header
      })

      return response.json()
  }
);

export const appSlice = createSlice({
  name: 'app',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
      checkSession: ( state ) => {
          const session = loginHelper.getLocalStorage('session')
          
          if( session && ((new Date() - new Date( session.datetime )) / 1000 / 3600) < 24){
              state.isValidSession = true
              state.token = session.token
          }else{
              state.isValidSession = false
              state.token = ''
              loginHelper.setLocalStorage('session',null)
          } 
          
      },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
        .addCase(getDataAsync.pending, (state) => {
          state.dataStatus = 'loading';
        })
        .addCase(getDataAsync.rejected, (state) => {
          state.dataStatus = 'idle';
          state.data = null ;
        })
        .addCase(getDataAsync.fulfilled, (state, action) => {
          state.dataStatus = 'idle';
          state.data = action.payload;
        });
    builder
        .addCase(login.pending, (state) => {
            console.log( 'pending' )
        })
        .addCase(login.rejected, (state) => {
            state.isValidSession = false
        })
        .addCase(login.fulfilled, (state, action) => {
            const res = action.payload 

            if( res.result === 1 ){
                loginHelper.setLocalStorage('session',{
                    token:res.token,
                    datetime: new Date()
                })
                state.isValidSession = true
                state.token = res.token
            }
            else{
                state.isValidSession = false
                state.token = ""
            }

        });
  },
});

export const { checkSession } = appSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectData = (state) => state.app.data
export const selectDataStatus = (state) => state.app.dataStatus
export const selectView = (state) => state.app.view
export const selectIsValidSession = (state) => state.app.isValidSession



export default appSlice.reducer;
